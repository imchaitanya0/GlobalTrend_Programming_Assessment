import java.util.HashMap;
import java.util.*;

class LRUCache {
    private class Node {
        int key;
        int value;
        Node prev;
        Node next;
        
        Node(int key, int value) {
            this.key = key;
            this.value = value;
        }
    }
    
    private HashMap<Integer, Node> cache;
    private int capacity;
    private Node head;
    private Node tail;
    
    public LRUCache(int capacity) {
        this.capacity = capacity;
        this.cache = new HashMap<>();
        this.head = new Node(0, 0);
        this.tail = new Node(0, 0);
        head.next = tail;
        tail.prev = head;
    }
    
    public int get(int key) {
        if (cache.containsKey(key)) {
            Node node = cache.get(key);
            removeNode(node);
            addToFront(node);
            return node.value;
        }
        return -1;
    }
    
    public void put(int key, int value) {
        if (cache.containsKey(key)) {
            Node node = cache.get(key);
            node.value = value;
            removeNode(node);
            addToFront(node);
        } else {
            if (cache.size() >= capacity) {
                cache.remove(tail.prev.key);
                removeNode(tail.prev);
            }
            Node newNode = new Node(key, value);
            cache.put(key, newNode);
            addToFront(newNode);
        }
    }
    
    private void removeNode(Node node) {
        node.prev.next = node.next;
        node.next.prev = node.prev;
    }
    
    private void addToFront(Node node) {
        node.next = head.next;
        node.prev = head;
        head.next.prev = node;
        head.next = node;
    }
}

public class Main {
    public static void main(String[] args) {
        // Created an LRU cache with capacity 4
        LRUCache cache = new LRUCache(4);

        // Put some key-value pairs
        cache.put(1, 1);
        cache.put(2, 2);
        cache.put(3, 3);
        cache.put(4, 4);
        
        // Get existing key
        System.out.println(cache.get(1));  // Output: 1
        
        // Put a new key-value pair, which will evict key 1
        cache.put(5, 5);
        
        // Try to get evicted key
        System.out.println(cache.get(1));  // Output: -1
        
        // Put a new key-value pair, which will evict key 2
        cache.put(6, 6);
        
        // Try to get evicted key
        System.out.println(cache.get(2));  // Output: -1
        
        // Get existing keys
        System.out.println(cache.get(6));  // Output: 6
        System.out.println(cache.get(4));  // Output: 4
        System.out.println(cache.get(5));  // Output: 5
    }
}
